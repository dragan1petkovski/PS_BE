// <auto-generated />
using System;
using DataAccessLayerDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace be.Migrations
{
    [DbContext(typeof(PSDBContext))]
    [Migration("20240707124200_t1")]
    partial class t1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClientDBDMUserDBDM", b =>
                {
                    b.Property<Guid>("clientsid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("usersid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("clientsid", "usersid");

                    b.HasIndex("usersid");

                    b.ToTable("ClientDBDMUserDBDM");
                });

            modelBuilder.Entity("DomainModel.DB.CertificateDBDM", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonalFolderDBDMid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamDBDMid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDBDMid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("expirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("friendlyname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("issuedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("issuedTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("passwordid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("updatedate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("PersonalFolderDBDMid");

                    b.HasIndex("TeamDBDMid");

                    b.HasIndex("UserDBDMid");

                    b.HasIndex("passwordid");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("DomainModel.DB.ClientDBDM", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("DomainModel.DB.CredentialDBDM", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonalFolderDBDMid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamDBDMid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDBDMid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("domain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("passwordid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("remote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedate")
                        .HasColumnType("datetime2");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("PersonalFolderDBDMid");

                    b.HasIndex("TeamDBDMid");

                    b.HasIndex("UserDBDMid");

                    b.HasIndex("passwordid");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("DomainModel.DB.PasswordDBDM", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("DomainModel.DB.PersonalFolderDBDM", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDBDMid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("UserDBDMid");

                    b.ToTable("PersonalFolders");
                });

            modelBuilder.Entity("DomainModel.DB.TeamDBDM", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("clientid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("clientid");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("DomainModel.DB.UserDBDM", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedate")
                        .HasColumnType("datetime2");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TeamDBDMUserDBDM", b =>
                {
                    b.Property<Guid>("teamsid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("usersid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("teamsid", "usersid");

                    b.HasIndex("usersid");

                    b.ToTable("TeamDBDMUserDBDM");
                });

            modelBuilder.Entity("ClientDBDMUserDBDM", b =>
                {
                    b.HasOne("DomainModel.DB.ClientDBDM", null)
                        .WithMany()
                        .HasForeignKey("clientsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModel.DB.UserDBDM", null)
                        .WithMany()
                        .HasForeignKey("usersid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModel.DB.CertificateDBDM", b =>
                {
                    b.HasOne("DomainModel.DB.PersonalFolderDBDM", null)
                        .WithMany("certificates")
                        .HasForeignKey("PersonalFolderDBDMid");

                    b.HasOne("DomainModel.DB.TeamDBDM", null)
                        .WithMany("certificates")
                        .HasForeignKey("TeamDBDMid");

                    b.HasOne("DomainModel.DB.UserDBDM", null)
                        .WithMany("certificates")
                        .HasForeignKey("UserDBDMid");

                    b.HasOne("DomainModel.DB.PasswordDBDM", "password")
                        .WithMany()
                        .HasForeignKey("passwordid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("password");
                });

            modelBuilder.Entity("DomainModel.DB.CredentialDBDM", b =>
                {
                    b.HasOne("DomainModel.DB.PersonalFolderDBDM", null)
                        .WithMany("credentials")
                        .HasForeignKey("PersonalFolderDBDMid");

                    b.HasOne("DomainModel.DB.TeamDBDM", null)
                        .WithMany("credentials")
                        .HasForeignKey("TeamDBDMid");

                    b.HasOne("DomainModel.DB.UserDBDM", null)
                        .WithMany("credentials")
                        .HasForeignKey("UserDBDMid");

                    b.HasOne("DomainModel.DB.PasswordDBDM", "password")
                        .WithMany()
                        .HasForeignKey("passwordid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("password");
                });

            modelBuilder.Entity("DomainModel.DB.PersonalFolderDBDM", b =>
                {
                    b.HasOne("DomainModel.DB.UserDBDM", null)
                        .WithMany("folders")
                        .HasForeignKey("UserDBDMid");
                });

            modelBuilder.Entity("DomainModel.DB.TeamDBDM", b =>
                {
                    b.HasOne("DomainModel.DB.ClientDBDM", "client")
                        .WithMany("teams")
                        .HasForeignKey("clientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");
                });

            modelBuilder.Entity("TeamDBDMUserDBDM", b =>
                {
                    b.HasOne("DomainModel.DB.TeamDBDM", null)
                        .WithMany()
                        .HasForeignKey("teamsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModel.DB.UserDBDM", null)
                        .WithMany()
                        .HasForeignKey("usersid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModel.DB.ClientDBDM", b =>
                {
                    b.Navigation("teams");
                });

            modelBuilder.Entity("DomainModel.DB.PersonalFolderDBDM", b =>
                {
                    b.Navigation("certificates");

                    b.Navigation("credentials");
                });

            modelBuilder.Entity("DomainModel.DB.TeamDBDM", b =>
                {
                    b.Navigation("certificates");

                    b.Navigation("credentials");
                });

            modelBuilder.Entity("DomainModel.DB.UserDBDM", b =>
                {
                    b.Navigation("certificates");

                    b.Navigation("credentials");

                    b.Navigation("folders");
                });
#pragma warning restore 612, 618
        }
    }
}
